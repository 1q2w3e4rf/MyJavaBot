package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

import java.io.IOException;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Random;

public class MyTelegramBot extends TelegramLongPollingBot {
    private final String BOT_USERNAME = "@currencies_in_java_bot";
    private final String BOT_TOKEN = "7576863301:AAHGq4CxrdDk6kPS6FOyDo0hBrVH6U3kvTo";
    private static final int UPDATE_INTERVAL = 60 * 1000; // 60 —Å–µ–∫—É–Ω–¥
    private static final Random random = new Random();

    // –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    private static final Map<String, String> currencyAliases = new HashMap<>();

    static {
        currencyAliases.put("–¥–æ–ª–ª–∞—Ä", "usd-rub");
        currencyAliases.put("–µ–≤—Ä–æ", "eur-rub");
        currencyAliases.put("—é–∞–Ω—å", "cny-rub");
        currencyAliases.put("—Ç–µ–Ω–≥–µ", "kzt-rub");
        currencyAliases.put("–∏–µ–Ω–∞", "jpy-rub");
    }

    // –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /compare
    private static final String DEFAULT_COMPARE_CURRENCY = "usd-rub";

    @Override
    public String getBotUsername() {
        return BOT_USERNAME;
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }

    private String[] getExchangeRate(String currencyPair) {
        String url = "https://ru.investing.com/currencies/" + currencyPair.toLowerCase();
        String[] result = new String[2];
        try {
            Document doc = Jsoup.connect(url).get();
            Elements priceElements = doc.select("div[data-test=instrument-price-last]");
            Elements percentChangeElements = doc.select("span[data-test=instrument-price-change-percent]");

            result[0] = priceElements.size() > 0 ? priceElements.get(0).text() : "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω";
            result[1] = percentChangeElements.size() > 0 ? percentChangeElements.get(0).text() : "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
            return result;
        } catch (IOException e) {
            result[0] = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: " + e.getMessage();
            result[1] = "–û—à–∏–±–∫–∞";
            return result;
        }
    }

    private void handleCurrency(long chatId, String currencyPair) {
        String[] rate = getExchangeRate(currencyPair);
        if (rate != null && rate.length >= 2) {
            if (rate[0].toLowerCase().contains("–æ—à–∏–±–∫–∞") || rate[0].toLowerCase().contains("404") || rate[1].toLowerCase().contains("–æ—à–∏–±–∫–∞") || rate[1].toLowerCase().contains("404")) {
                sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç—É –∫—É—Ä—Å–∞ –¥–ª—è " + currencyPair);
            } else {
                double change = parseChange(rate[1]);
                String trendEmoji = getTrendEmoji(change);

                sendMessage(chatId, "–ö—É—Ä—Å " + currencyPair.toUpperCase() + ": " + rate[0] + "\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: " + rate[1] + trendEmoji + "\n" + getCurrencyEmoji(currencyPair));
            }
        }else {
            sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç—É –∫—É—Ä—Å–∞ –¥–ª—è " + currencyPair);
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText().toLowerCase();
            long chatId = update.getMessage().getChatId();
            if (messageText.equals("/start")) {
                sendMessage(chatId, "üëã–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–∞ üí≤ –∏ üí∂. –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é!");
            } else if (messageText.equals("/usd") || messageText.equals("–¥–æ–ª–ª–∞—Ä")) {
                handleCurrency(chatId, "usd-rub");
            } else if (messageText.equals("/help") || messageText.equals("–ø–æ–º–æ—â—å")) {
                sendMessage(chatId, "(‚óè'‚ó°'‚óè)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/usd - –∫—É—Ä—Å USD/RUB‚úåÔ∏è\n/eur - –∫—É—Ä—Å EUR/RUB‚úåÔ∏è\n/cny - –∫—É—Ä—Å CNY/RUB‚úåÔ∏è\n/kzt - –∫—É—Ä—Å KZT/RUB‚úåÔ∏è\n/jpy - –∫—É—Ä—Å JPY/RUB‚úåÔ∏è\n/all - –ø–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç");
            } else if (messageText.equals("/kzt") || messageText.equals("—Ç–µ–Ω–≥–µ")){
                handleCurrency(chatId, "kzt-rub");
            } else if (messageText.equals("/jpy") || messageText.equals("–∏–µ–Ω–∞")) {
                handleCurrency(chatId, "jpy-rub");
            } else if (messageText.equals("/eur") || messageText.equals("–µ–≤—Ä–æ")) {
                handleCurrency(chatId, "eur-rub");
            } else if (messageText.equals("/cny") || messageText.equals("—é–∞–Ω—å")) {
                handleCurrency(chatId, "cny-rub");
            } else if (messageText.equals("/all")) {
                handleAllCurrencies(chatId);
            } else if (messageText.matches("^[a-zA-Z]{3}-[a-zA-Z]{3}$")) {
                handleCurrency(chatId, messageText);
            }
            else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ª–∏–∞—Å–æ–º –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¥–æ–ª–ª–∞—Ä" -> "usd-rub")
                String currencyPair = currencyAliases.get(messageText);
                if (currencyPair != null) {
                    handleCurrency(chatId, currencyPair);
                } else {
                    sendMessage(chatId, "–ù–µ –ø–æ–Ω–∏–º–∞—é –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help.");
                }
            }
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private String getCurrencyEmoji(String currencyPair) {
        String currencyCode = currencyPair.substring(0, 3).toUpperCase();
        switch (currencyCode) {
            case "USD":
                return "ü§ë (–°–®–ê)";
            case "EUR":
                return "üá™üá∫ (–ï–≤—Ä–æ—Å–æ—é–∑)";
            case "CNY":
                return "üá®üá≥ (–ö–∏—Ç–∞–π)";
            case "KZT":
                return "üá∞üáø (–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω)";
            case "JPY":
                return "üáØüáµ (–Ø–ø–æ–Ω–∏—è)";
            default:
                return "üí∞"; // –û–±—â–∏–π –∑–Ω–∞—á–æ–∫ –≤–∞–ª—é—Ç—ã
        }
    }

    private double parseChange(String changeText) {
        try {
            // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ double
            return Double.parseDouble(changeText.replace("%", ""));
        } catch (NumberFormatException e) {
            return 0.0; // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
        }
    }

    private String getTrendEmoji(double change) {
        if (change > 0) {
            return " üìà"; // –†–∞—Å—Ç–µ—Ç
        } else if (change < 0) {
            return " üìâ"; // –ü–∞–¥–∞–µ—Ç
        } else {
            return " ‚û°Ô∏è"; // –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        }
    }

    private void handleAllCurrencies(long chatId) {
        StringBuilder sb = new StringBuilder();
        for (String currency : currencyAliases.values()) {
            String[] rate = getExchangeRate(currency);
            if (rate != null && rate.length >= 2) {
                if (!rate[0].toLowerCase().contains("–æ—à–∏–±–∫–∞") && !rate[0].toLowerCase().contains("404") && !rate[1].toLowerCase().contains("–æ—à–∏–±–∫–∞") && !rate[1].toLowerCase().contains("404")) {
                    double change = parseChange(rate[1]);
                    String trendEmoji = getTrendEmoji(change);
                    sb.append("–ö—É—Ä—Å ").append(currency.toUpperCase()).append(": ").append(rate[0]).append("\n");
                    sb.append("–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ").append(rate[1]).append(trendEmoji).append("\n");
                    sb.append(getCurrencyEmoji(currency)).append("\n\n");
                }
            }
        }
        if (sb.length() > 0) {
            sendMessage(chatId, sb.toString());
        } else {
            sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.");
        }
    }
}
